// #### Task 1 üíª
import fetch from "node-fetch";
import { error } from "console";
import { title } from "process";

// –£ –Ω–∞—Å –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —ç—Ç–∏—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

// –ù–æ –ø–æ –∫–∞–∫–∏–º —Ç–æ –Ω–µ–æ–±—ä—è—Å–Ω–∏–º—ã–º –ø—Ä–∏—á–∏–Ω–∞–º, –Ω–∞–º —Ç—Ä–µ–±—É—é—Ç—Å—è –ø–æ—Å—Ç—ã –Ω–æ–º–µ—Ä 3, 7, 15, 23. –í—ã–≥–ª—è–¥–∏—Ç –ø—Ä–æ—Å—Ç–æ. –ù–æ –µ—Å—Ç—å –Ω—é–∞–Ω—Å üêí
// –ü–æ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –°–Ω–∞—á–∞–ª–∞ 15, –ø–æ—Ç–æ–º 23, –ø–æ—Ç–æ–º 7 –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º 3. –ê –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ø–æ—Å—Ç–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è,
// –Ω–∞–º —Ç–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ  –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –æ—à–∏–±–∫—É.

// –ù–∞—à–∞ –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ—Å—Ç—ã, –∏–ª–∏ –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ.

// –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å https://jsonplaceholder.typicode.com/posts
// –ó–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ https://jsonplaceholder.typicode.com/comments?postId=1 –ª–∏–±–æ —á–µ—Ä–µ–∑ setTimeout.
// ###### –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∑–∞–¥–∞—á—É –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:
// - Promise chaining
// - Async / await

//https://jsonplaceholder.typicode.com/posts?id=1

type responsBodyT = {
  userId: number;
  id: number;
  title: string;
  body: string;
};

let url = "https://jsonplaceholder.typicode.com/posts";

//1. Promise chaining

function GetPost(IdArray: number[]): void {
  // Collect promises
  let ArrayPromises: Promise<any>[] = [];
  IdArray.forEach((id) => {
    ArrayPromises.push(
      fetch(`https://jsonplaceholder.typicode.com/posts?id=${id}`)
        .then(
          (res) => res.json(),
          (error) => {
            console.log(`error in response: ${error}`);
          }
        )
        .then((res) => res[0] as responsBodyT)
      // .then((res) => console.log(`Post #${id}: ${res[0].body}`)) . // for responses tested
    );
  });
  // Promise.all();
  Promise.all(ArrayPromises).then((results: any[]) => {
    results.forEach((res) => {
      console.log(`Post: ${res.id}: ${res.body}`);
    });
  });
}
GetPost([15, 23, 7, 3]);

// - Async / await
async function AsyncGetPost(IdArray: number[]): Promise<void> {
  // Collect promises
  let ArrayPromises: Promise<any>[] = [];
  IdArray.forEach((id) => {
    ArrayPromises.push(
      fetch(`https://jsonplaceholder.typicode.com/posts?id=${id}`)
        .then(
          (res) => res.json(),
          (error) => {
            console.log(`error in response: ${error}`);
          }
        )
        .then((res) => res[0] as responsBodyT)
      // .then((res) => console.log(`Post #${id}: ${res[0].body}`))
    );
  });
  // Promise.all();
  Promise.all(ArrayPromises).then((results: any[]) => {
    results.forEach((res) => {
      console.log(`Post: ${res.id}: ${res.body}`);
    });
  });
}
AsyncGetPost([1, 5, 7]);
